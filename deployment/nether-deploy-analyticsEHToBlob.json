/*
* This template is used to create Stream Analytics Jobs to consume from Azure's Event Hub, select specific events, and
* persist them to blob storage. The template will create an Event Hub consumer group, the Stream 
* Anallytics Job, and associate it with the designated output storage account (which should already exist).
*
* For more information, please refer to the Nether repository at: https://github.com/MicrosoftDX/nether/tree/master/deployment
*/
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "jobProperties": {
            "type" : "object",
            "metadata" : {
                "description" : "a JSON object job name, SKU, streaming units, and query to execute"
            }
        },
        "eventHubProperties": {
            "type" : "object",
            "metadata" : {
                "description" : "a JSON object containing: eventHubName, serviceBusNamespace, sharedAccessPolicyName, sharedAccessPolicyKey, consumerGroupName"
            }
        },
        "consumerGroupName": {
            "type": "string",
            "defaultValue": "analytics",
            "metadata": {
                "description" :"the name of the consumer group to be used by this analytics job"
            }
        },
        "storageProperties": {
            "type" : "object",
            "metadata" : {
                "description" : "a JSON object containing: storage account name, and account key, and output container name"
            }
        }
    },
    "variables": {
        "ehApiVersion": "2015-08-01",
        "asaApiVersion": "2015-09-01",
        /* the input data source (ds) properties for the analytics job */
        "inputDSProperties": {
            "serviceBusNamespace": "[parameters('eventHubProperties')['namespace']]",
            "eventHubName": "[parameters('eventHubProperties')['hubname']]",
            "sharedAccessPolicyName": "[parameters('eventHubProperties')['policyName']]",
            "sharedAccessPolicyKey": "[parameters('eventHubProperties')['policyKey']]",
            "consumerGroupName": "[parameters('consumerGroupName')]"
        },
        /* the analytics job transformation properties */
        "transformProperties": {
            "streamingUnits": "[parameters('jobProperties')['streamingUnits']]",
            "query": "[parameters('jobProperties')['query']]"
        },
        /* the output data source (ds) properties for the analytics jobs */
        "outputDSProperties": 
        {
            "storageAccounts": [
                {
                    "accountName": "[parameters('storageProperties')['accountName']]",
                    "accountKey": "[parameters('storageProperties')['accountKey']]"
                }
            ],
            "container": "[parameters('storageProperties')['container']]",
            "pathPattern": "[concat(parameters('storageProperties')['pathPattern'], '/{date}')]",
            "dateFormat": "yyyy/MM/dd"
        }
    },
    "resources": [
        /* create the consumer group for this streaming job */
        {
            "type": "Microsoft.EventHub/Namespaces/EventHubs/ConsumerGroups",
            "name": "[concat(variables('inputDSProperties')['serviceBusNamespace'], '/', variables('inputDSProperties')['eventHubName'], '/', parameters('consumerGroupName'))]",
            "apiVersion": "[variables('ehApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "path": "[concat('Microsoft.EventHub/Namespaces',parameters('eventHubProperties')['namespace'],'/', parameters('eventHubProperties')['hubname'])]"
            }
        },
        /* Azure stream analytics job */
        {
            "type": "Microsoft.StreamAnalytics/StreamingJobs",
            "name": "[parameters('jobProperties')['jobName']]",
            "apiVersion": "[variables('asaApiVersion')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.EventHub/Namespaces/',variables('inputDSProperties')['serviceBusNamespace'],'/EventHubs/',variables('inputDSProperties')['eventHubName'],'/ConsumerGroups/',parameters('consumerGroupName'))]"
            ],
            "properties": {
                "sku": {
                    "name": "[parameters('jobProperties')['SKU']]"  
                },
                "outputStartMode": "LastOutputEventTime",
                "inputs": [
                    {
                        "name": "Input",
                        "properties": {
                            "type": "stream",
                            "serialization": {
                                "type": "JSON",
                                "properties": {
                                    "encoding": "UTF8"
                                }
                            },
                            "datasource": {
                                "type": "Microsoft.ServiceBus/EventHub",
                                "properties": "[variables('inputDSProperties')]"
                            }
                        }
                    }
                ],
                "transformation": {
                    "name": "[parameters('jobProperties')['jobName']]",
                    "properties": "[variables('transformProperties')]"
                },
                "outputs": [
                    {
                        "name": "BlobSink",
                        "properties": {
                        "serialization": {
                            "type": "CSV",
                            "properties": {
                                "fieldDelimiter": ",",
                                "encoding": "UTF8"
                            }
                        },
                        "datasource": {
                            "type": "Microsoft.Storage/Blob",
                            "properties": "[variables('outputDSProperties')]"
                        }
                        }
                    }
                ]
            }
        }
    ],
    /* outputs: 
    *
    */
    "outputs": {

    }
}